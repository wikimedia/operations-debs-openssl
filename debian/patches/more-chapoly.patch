Index: openssl/ssl/s3_lib.c
===================================================================
--- openssl.orig/ssl/s3_lib.c
+++ openssl/ssl/s3_lib.c
@@ -4195,7 +4195,8 @@ SSL_CIPHER *ssl3_choose_cipher(SSL *s, S
     int i, ii, ok;
     CERT *cert;
     unsigned long alg_k, alg_a, mask_k, mask_a, emask_k, emask_a;
-    int use_chacha = 0;
+    int use_chacha_ecdhe = 0;
+    int use_chacha_dhe = 0;
 
     /* Let's see which ciphers we can support */
     cert = s->cert;
@@ -4229,17 +4230,50 @@ SSL_CIPHER *ssl3_choose_cipher(SSL *s, S
     if (s->options & SSL_OP_CIPHER_SERVER_PREFERENCE || tls1_suiteb(s)) {
         prio = srvr;
         allow = clnt;
-        /* Use ChaCha20+Poly1305 iff it's client's most preferred cipher suite */
-        if (sk_SSL_CIPHER_num(clnt) > 0) {
-            c = sk_SSL_CIPHER_value(clnt, 0);
-            if (c->algorithm_enc == SSL_CHACHA20POLY1305 ||
-                c->algorithm_enc == SSL_CHACHA20POLY1305_D)
-                use_chacha = 1;
+        /*
+         * Search client ciphersuite subsets 'ECDHE-*' and 'DHE-RSA-*', turning
+         * on server-side chapoly support for each subset independently, iff
+         * chapoly is higher than AES-GCM (which may not even exist!) within
+         * that subset on the client.  This is intended to be used with a
+         * server-preference ciphersuite similar to:
+         * ECDHE-RSA-CHACHA20-POLY1305 (and/or ECDSA)
+         * ECDHE-RSA-AES128-GCM-SHA256 (and/or ECDSA and/or AES256)
+         * DHE-RSA-CHACHA20-POLY1305
+         * DHE-RSA-AES128-GCM-SHA256 (and/or AES256)
+         * ... lesser compatibility options ...
+         */
+        for (i = 0; i < sk_SSL_CIPHER_num(clnt); i++) {
+            c = sk_SSL_CIPHER_value(clnt, i);
+            if (c->algorithm_mkey == SSL_kEECDH) {
+                if (c->algorithm_enc == SSL_CHACHA20POLY1305 ||
+                    c->algorithm_enc == SSL_CHACHA20POLY1305_D) {
+                    use_chacha_ecdhe = 1;
+                    break;
+                } else if (c->algorithm_enc == SSL_AES128GCM ||
+                           c->algorithm_enc == SSL_AES256GCM) {
+                    break;
+                }
+            }
+        }
+        for (i = 0; i < sk_SSL_CIPHER_num(clnt); i++) {
+            c = sk_SSL_CIPHER_value(clnt, i);
+            if (c->algorithm_mkey == SSL_kEDH &&
+                c->algorithm_auth == SSL_aRSA) {
+                if (c->algorithm_enc == SSL_CHACHA20POLY1305 ||
+                    c->algorithm_enc == SSL_CHACHA20POLY1305_D) {
+                    use_chacha_dhe = 1;
+                    break;
+                } else if (c->algorithm_enc == SSL_AES128GCM ||
+                           c->algorithm_enc == SSL_AES256GCM) {
+                    break;
+                }
+            }
         }
     } else {
         prio = clnt;
         allow = srvr;
-        use_chacha = 1;
+        use_chacha_ecdhe = 1;
+        use_chacha_dhe = 1;
     }
 
     tls1_set_cert_validity(s);
@@ -4251,10 +4285,14 @@ SSL_CIPHER *ssl3_choose_cipher(SSL *s, S
         if ((c->algorithm_ssl & SSL_TLSV1_2) && !SSL_USE_TLS1_2_CIPHERS(s))
             continue;
 
-        /* Skip ChaCha unless top client priority */
-        if ((c->algorithm_enc == SSL_CHACHA20POLY1305 ||
-             c->algorithm_enc == SSL_CHACHA20POLY1305_D) && !use_chacha)
-            continue;
+        /* Skip chapoly unless turned on above */
+        if (c->algorithm_enc == SSL_CHACHA20POLY1305 ||
+            c->algorithm_enc == SSL_CHACHA20POLY1305_D) {
+            if (c->algorithm_mkey == SSL_kEECDH && !use_chacha_ecdhe)
+                continue;
+            if (c->algorithm_mkey == SSL_kEDH && !use_chacha_dhe)
+                continue;
+        }
 
         ssl_set_cert_masks(cert, c);
         mask_k = cert->mask_k;
